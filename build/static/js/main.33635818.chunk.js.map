{"version":3,"sources":["reportWebVitals.js","context/auth.js","components/MenuBar.js","graphql/mutation/likePost.js","util/MyPopup.js","components/LikeButton.js","graphql/query/fetchPosts.js","graphql/mutation/deletePost.js","graphql/mutation/deleteComment.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","graphql/mutation/createPost.js","components/PostForm.js","pages/home.js","graphql/mutation/loginUser.js","pages/login.js","graphql/mutation/registerUser.js","pages/register.js","graphql/query/fetchPost.js","graphql/mutation/createComment.js","pages/singlePost.js","util/AuthRoute.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","MenuBar","useContext","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","as","Link","to","position","onClick","active","LIKE_POST_MUTATION","gql","MyPopup","content","children","Popup","inverted","trigger","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","RestPosts","readQuery","query","getPosts","filter","p","writeQuery","data","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","Home","useQuery","loading","Grid","columns","divided","Row","className","Column","Transition","Group","map","marginBottom","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","graphQLErrors","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","FETCH_POST_QUERY","SUBMT_COMMENT_MUTATION","SinglePost","postMarkup","comment","setComment","match","params","commentInputRef","useRef","submitComment","getPost","comments","width","float","console","log","ref","disabled","trim","AuthRoute","Component","component","rest","render","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.33635818.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = {\n    user: null\n}\n\nif (localStorage.getItem('jwtToken')) {\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n    if(decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem('jwtToken')\n    } else {\n        initialState.user = decodedToken;\n    }\n}\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n})\n\nfunction authReducer(state, action) {\n    switch(action.type) {\n        case 'LOGIN':\n            return {\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT': \n            return {\n                ...state,\n                user: null\n            }\n        default: \n            return state;\n    }\n}\n\nfunction AuthProvider(props) {\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    function login(userData){\n        localStorage.setItem('jwtToken', userData.token);\n        dispatch({\n            type: 'LOGIN',\n            payload: userData\n        });\n    }\n\n    function logout() {\n        localStorage.removeItem('jwtToken');\n        dispatch({ type: 'LOGOUT'});\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{ user: state.user, login, logout}}\n            {...props}\n        />\n    )\n}\n\nexport { AuthContext, AuthProvider }","import React, { useContext, useState } from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nconst MenuBar = () => {\n    const { user, logout } = useContext(AuthContext);\n    const pathname = window.location.pathname;\n    const path = pathname === '/' ? 'home' : pathname.substr(1);\n    const [ activeItem, setActiveItem ] = useState(path);\n\n    const handleItemClick = (e, { name }) => setActiveItem(name);\n\n    const menuBar = user \n    ? (\n        <Menu pointing secondary size='massive' color='teal'>\n        <Menu.Item\n            name={'ようこそ ' + user.username + ' さん'}\n            as={Link}\n            to='/'\n        />\n        <Menu.Menu position='right'>\n        <Menu.Item\n            name='logout'\n            onClick={logout}\n        />\n        </Menu.Menu>\n    </Menu>\n    ) \n    : (\n        <Menu pointing secondary size='massive' color='teal'>\n            <Menu.Item\n                name='home'\n                active={activeItem === 'home'}\n                onClick={handleItemClick}\n                as={Link}\n                to='/'\n            />\n            <Menu.Menu position='right'>\n            <Menu.Item\n                name='login'\n                active={activeItem === 'login'}\n                onClick={handleItemClick}\n                as={Link}\n                to='/login'\n            />\n            <Menu.Item\n                name='register'\n                active={activeItem === 'register'}\n                onClick={handleItemClick}\n                as={Link}\n                to='/register'\n            />\n            </Menu.Menu>\n        </Menu>\n    )\n\n    return menuBar;\n}\n\nexport default MenuBar;","import { gql } from '@apollo/client';\n\nexport const LIKE_POST_MUTATION = gql`\nmutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n        id\n        likes {\n            id\n            username\n        }\n        likeCount\n    }\n}\n`","import { Popup } from 'semantic-ui-react';\nimport React from 'react';\n\nfunction MyPopup({ content, children }) {\n    return <Popup inverted content={content} trigger={children} />\n}\n\nexport default MyPopup;","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { Button, Icon, Label } from 'semantic-ui-react';\nimport { LIKE_POST_MUTATION } from '../graphql/mutation/likePost';\nimport MyPopup from '../util/MyPopup';\n\nfunction LikeButton({ user, post: { id, likeCount, likes }}) {\n    const [ liked, setLiked ] = useState(false);\n\n    useEffect(() => {\n        if (user && likes.find(like => like.username === user.username)) {\n            setLiked(true)\n        } else setLiked(false)\n    }, [user, likes]);\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\n        variables: { postId: id }\n    })\n\n    const likeButton = user ? (\n        liked \n        ? (\n            <Button color='teal'>\n                <Icon name='heart' />\n            </Button>\n        )\n        : (\n            <Button color='teal' basic>\n                <Icon name='heart' />\n            </Button>\n        )\n    )  \n    : (\n        <Button as={Link} to='/login' color='teal' basic>\n            <Icon name='heart' />\n        </Button>\n    )\n\n    return (\n        <Button as='div' labelPosition='right' onClick={likePost}>\n            <MyPopup\n                content={liked ? 'unlike' : 'like'}\n            >\n            { likeButton }\n            </MyPopup>\n            <Label basic color='teal' pointing='left'>\n            { likeCount }\n            </Label>\n        </Button>\n    )\n}\n\n\nexport default LikeButton;\n","import { gql } from '@apollo/client';\n\nexport const FETCH_POSTS_QUERY = gql`\n{\n    getPosts {\n        id\n        body\n        createdAt\n        username\n        likeCount\n        likes {\n            username\n        }\n        commentCount\n        comments {\n            id\n            username\n            createdAt\n            body\n        }\n    }\n}\n`\n","import { gql } from '@apollo/client';\n\nexport const DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId: ID!) {\n        deletePost(postId: $postId) \n    }\n`","import { gql } from '@apollo/client';\n\nexport const DELETE_COMMENT_MUTATION = gql`\n    mutation deleteComment($postId: ID!, $commentId: ID!) {\n        deleteComment(postId: $postId, commentId: $commentId) {\n            id\n            comments {\n                id\n                username\n                createdAt\n                body\n            }\n            commentCount\n        }\n    }\n`","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client'\n\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\nimport { FETCH_POSTS_QUERY } from '../graphql/query/fetchPosts';\nimport { DELETE_POST_MUTATION } from '../graphql/mutation/deletePost';\nimport { DELETE_COMMENT_MUTATION } from '../graphql/mutation/deleteComment';\nimport MyPopup from '../util/MyPopup';\n\nfunction DeleteButton({ postId, commentId, callback }) {\n\n    const [ confirmOpen, setConfirmOpen ] = useState(false);\n\n    const mutation = commentId \n    ? DELETE_COMMENT_MUTATION \n    : DELETE_POST_MUTATION\n\n    const [ deletePostOrMutation ] = useMutation(mutation, {\n        update(proxy) {\n            setConfirmOpen(false);\n            if (!commentId) {\n                const data = proxy.readQuery({\n                    query: FETCH_POSTS_QUERY\n                });\n                const RestPosts = data.getPosts.filter(p => p.id !== postId);\n                proxy.writeQuery({ query: FETCH_POSTS_QUERY, data: {\n                    getPosts: [\n                        ...RestPosts,\n                    ]\n                }});\n            }\n            if (callback) callback();\n        },\n        variables: {\n            postId,\n            commentId\n        }\n    })\n    return ( \n        <>\n            <MyPopup\n                content={commentId ? 'Delete Comment' : 'Delete Post'}\n            >\n            <Button \n                as='div' \n                color='red'\n                floated='right'\n                onClick={() => setConfirmOpen(true) }\n            >\n            <Icon name='trash' style={{ margin: 0 }}/>\n            </Button>\n            </MyPopup>\n            <Confirm\n                open={confirmOpen}\n                onCancel={() => setConfirmOpen(false)}\n                onConfirm={deletePostOrMutation}\n            />\n        </>\n    )\n}\n\nexport default DeleteButton;","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from './LikeButton.js';\nimport DeleteButton from './DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nconst PostCard = ({ post: { body, createdAt, id, username, likeCount, commentCount, likes }}) => {\n\n    const { user } = useContext(AuthContext);\n\n    return (\n            <Card fluid>\n                <Card.Content>\n                <Image\n                    floated='right'\n                    size='mini'\n                    src='https://react.semantic-ui.com/images/avatar/large/molly.png'\n                />\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta as={Link} to={`/posts/${id}`}>\n                {moment(createdAt).fromNow(true)}\n                </Card.Meta>\n                <Card.Description>{body}</Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                <LikeButton\n                    user={user}\n                    post={{ id, likes, likeCount }} \n                />\n                <MyPopup content='Comment on Post'>\n                    <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\n                    <Button color='blue' basic>\n                        <Icon name='comments' />\n                    </Button>\n                        <Label basic color='blue' pointing='left'>\n                        {commentCount}\n                        </Label>\n                    </Button>\n                </MyPopup>\n                {\n                    user \n                    && user.username === username \n                    && <DeleteButton postId={id} />\n                }\n                </Card.Content>\n            </Card>\n    )\n}\n\nexport default PostCard","import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) => {\n    const [ values, setValues ] = useState(initialState);\n\n    const onChange = (event) => {\n        setValues({ ...values, [event.target.name]: event.target.value})\n    }\n\n    const onSubmit = event => {\n        event.preventDefault();\n        callback();\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n}\n\n","import { gql } from '@apollo/client';\n\nexport const CREATE_POST_MUTATION = gql`\n    mutation createPost($body: String!) {\n        createPost(body: $body) {\n            id\n            body\n            createdAt\n            username\n            likes {\n                id\n                username\n                createdAt\n            }\n            likeCount\n            comments {\n                id\n                body\n                username\n                createdAt\n            }\n            commentCount\n        }\n    }\n`","import React from 'react'\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/client' \n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../graphql/query/fetchPosts';\nimport { CREATE_POST_MUTATION } from '../graphql/mutation/createPost';\n\nfunction PostForm() {\n\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: ''\n    })\n\n    const [ createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(proxy, result) {\n            const data = proxy.readQuery({\n                query: FETCH_POSTS_QUERY\n            })\n            //↓のやり方だと読み取り専用のキャッシュが変更できずにエラーになる\n            //data.getPosts = [result.data.createPost, ...newGetPosts];\n            //proxy.writeQuery({ query: FETCH_POSTS_QUERY, data })\n            proxy.writeQuery({ query: FETCH_POSTS_QUERY, data: {\n                getPosts: [\n                    result.data.createPost,\n                    ...data.getPosts,\n                ]\n            } });\n            values.body = ''\n        }\n    })\n\n    function createPostCallback(){\n        createPost();\n    }\n\n    return (\n        <>\n            <Form onSubmit={onSubmit}>\n                <h2>Create a Post:</h2>\n                <Form.Field>\n                    <Form.Input\n                        placeholder='Hi World!'\n                        name='body'\n                        onChange={onChange}\n                        value={values.body}\n                        error={error ? true : false}\n                    />\n                    <Button type='submit' color='teal'>\n                        Submit\n                    </Button>\n                </Form.Field>\n            </Form>\n        </>\n    )\n        \n}\n\nexport default PostForm;\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client';\n\nimport { Grid, Transition } from 'semantic-ui-react';\n\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY } from '../graphql/query/fetchPosts';\nimport { AuthContext } from '../context/auth';\n\nconst Home = () => {\n    const { user } = useContext(AuthContext);\n    const { loading, data } = useQuery(FETCH_POSTS_QUERY);\n    \n    return (\n        <Grid columns={3} divided>\n            <Grid.Row className='page-title'>\n                <h1>Recent Posts</h1>\n            </Grid.Row>\n            <Grid.Row>\n            {\n                user && (\n                    <Grid.Column>\n                        <PostForm />\n                    </Grid.Column>\n                )\n            }\n            {\n                loading \n                ? ( <h1>Loading ...</h1>)\n                : ( \n                    <Transition.Group>\n                    {\n                        data.getPosts && data.getPosts.map(post => (\n                            <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                                <PostCard post={post} />\n                            </Grid.Column>\n                        ))\n                    }\n                    </Transition.Group>\n                )\n            }\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default Home;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ) {\n        login(\n            username: $username,\n            password: $password,\n        ) {\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`\n","import React, { useContext,useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { Button, Form } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth'\nimport { useForm } from '../util/hooks';\nimport { LOGIN_USER } from '../graphql/mutation/loginUser';\n\nconst Login = (props) => {\n    const context = useContext(AuthContext);\n\n    const [ errors, setErrors ] = useState({})\n\n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n        username: '',\n        password: ''\n    })\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        update(_, {data: {login: userData}}) {\n            context.login(userData)\n            props.history.push('/')\n        },\n        onError(err) {\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    })\n\n    function loginUserCallback(){\n        loginUser();\n    }\n\n    return (\n        <div className='form-container'>\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                <h1>Login</h1>\n                <Form.Input\n                    label='Username'\n                    placeholder='Username'\n                    name='username'\n                    type='text'\n                    value={values.username}\n                    error={errors.username ? true : false}\n                    onChange={onChange}\n                />\n\n                <Form.Input\n                    label='Password'\n                    placeholder='Password'\n                    name='password'\n                    type='password'\n                    value={values.password}\n                    error={errors.password ? true : false}\n                    onChange={onChange}\n                />\n\n                <Button type='submit' primary>\n                    Login\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className='ui error message'>\n                    <ul className='list'>\n                        {Object.values(errors).map((value)=> (\n                            <li key={value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Login;","import { gql } from '@apollo/client';\n\nexport const REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ) {\n        register(\n            registerInput: {\n                username: $username,\n                email: $email,\n                password: $password,\n                confirmPassword: $confirmPassword\n            }\n        ) {\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`\n","import React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { Button, Form } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport { REGISTER_USER } from '../graphql/mutation/registerUser';\n\nconst Register = (props) => {\n    const context = useContext(AuthContext);\n    const [ errors, setErrors ] = useState({})\n\n    const { onChange, onSubmit, values } = useForm(registerUser, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n    })\n\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\n        update(_, {data: { register: userData}}) {\n            context.login(userData)\n            props.history.push('/')\n        },\n        onError(err) {\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    })\n\n    function registerUser() {\n        addUser();\n    }\n\n    return (\n        <div className='form-container'>\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                <h1>Register</h1>\n                <Form.Input\n                    label='Username'\n                    placeholder='Username'\n                    name='username'\n                    type='text'\n                    value={values.username}\n                    error={errors.username ? true : false}\n                    onChange={onChange}\n                />\n                <Form.Input\n                    label='Email'\n                    placeholder='Email'\n                    name='email'\n                    type='email'\n                    value={values.email}\n                    error={errors.email ? true : false}\n                    onChange={onChange}\n                />\n                <Form.Input\n                    label='Password'\n                    placeholder='Password'\n                    name='password'\n                    type='password'\n                    value={values.password}\n                    error={errors.password ? true : false}\n                    onChange={onChange}\n                />\n                <Form.Input\n                    label='Confirm Password'\n                    placeholder='Confirm Password'\n                    name='confirmPassword'\n                    type='password'\n                    value={values.confirmPassword}\n                    error={errors.confirmPassword ? true : false}\n                    onChange={onChange}\n                />\n                <Button type='submit' primary>\n                    Register\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className='ui error message'>\n                    <ul className='list'>\n                        {Object.values(errors).map((value)=> (\n                            <li key={value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n\n\nexport default Register;\n","import { gql } from '@apollo/client';\n\nexport const FETCH_POST_QUERY = gql`\n    query($postId: ID!) {\n        getPost(postId: $postId) {\n            id\n            body\n            createdAt\n            username\n            likeCount\n            likes {\n                username\n            }\n            commentCount\n            comments {\n                id\n                username\n                createdAt\n                body\n            }\n        }\n    }\n`\n","import { gql } from '@apollo/client';\n\nexport const SUBMT_COMMENT_MUTATION = gql`\n    mutation($postId: String!, $body: String!) {\n        createComment(postId: $postId, body: $body) {\n            id\n            comments {\n                id\n                body\n                createdAt\n                username\n            }\n            commentCount\n        }\n    }\n`","import React, { useState, useContext, useRef } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Button, Card, Form, Grid, Icon, Image, Label } from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\nimport { FETCH_POST_QUERY } from '../graphql/query/fetchPost';\nimport { SUBMT_COMMENT_MUTATION } from '../graphql/mutation/createComment';\n\n\nfunction SinglePost(props) {\n    const [ comment, setComment ] = useState('');\n\n    const postId = props.match.params.postId;\n\n    const { user } = useContext(AuthContext);\n\n    const commentInputRef = useRef(null);\n\n    const { data } = useQuery(FETCH_POST_QUERY, {\n        variables: {\n            postId\n        }\n    })\n\n    const [ submitComment ] = useMutation(SUBMT_COMMENT_MUTATION, {\n        update() {\n            setComment('');\n            //commentInputRef.current.blur();\n        },\n        variables: {\n            postId,\n            body: comment\n        }\n    })\n\n    function deletePostCallback() {\n        props.history.push('/');\n    }\n\n    let postMarkup;\n\n    if (!data) {\n        postMarkup = <p>Loading post ...</p>\n    } else {\n        const { id, body, createdAt, username, comments, likes, likeCount, commentCount } =\n            data.getPost;\n\n        postMarkup = (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                        <Image\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\n                            size='small'\n                            float='right'\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Card fluid>\n                            <Card.Content>\n                                <Card.Header>{ username }</Card.Header>\n                                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                                <Card.Description>{ body }</Card.Description>\n                            </Card.Content>\n                            <hr />\n                            <Card.Content extra>\n                                <LikeButton user={ user } post={{ id, likeCount, likes }} />\n                                <MyPopup\n                                    content='Comment on Post'\n                                >\n                                    <Button\n                                        as='div'\n                                        labelPosition='right'\n                                        onClick={() => console.log('comment on post')}\n                                    >\n                                    <Button basic color='blue'>\n                                        <Icon name='comments' />\n                                    </Button>\n                                        <Label basic color='blue' pointing='left'>\n                                            { commentCount }\n                                        </Label>\n                                    </Button>\n                                </MyPopup>\n                                {\n                                    user\n                                    && user.username === username\n                                    && (\n                                        <DeleteButton \n                                            postId={ id }\n                                            callback={ deletePostCallback }\n                                        />\n                                    )\n                                }\n                            </Card.Content>\n                        </Card>\n                        {\n                            user && (\n                                <Card fluid>\n                                    <Card.Content>\n                                        <p>Post a Comment</p>\n                                        <Form>\n                                            <div className='ui action input fluid'>\n                                                <input\n                                                    type='text'\n                                                    placeholder='コメント'\n                                                    name='comment'\n                                                    value={comment}\n                                                    onChange={event => setComment(event.target.value)}\n                                                    ref={commentInputRef}\n                                                />\n                                                <button \n                                                    type='submit'\n                                                    className='ui button teal'\n                                                    disabled={ comment.trim() === ''}\n                                                    onClick={submitComment}\n                                                >投稿</button>\n                                            </div>\n                                        </Form>\n                                    </Card.Content>\n                                </Card>\n                            )\n                        }\n                        {\n                            comments.map(comment => (\n                                <Card fluid key={comment.id}>\n                                    <Card.Content>\n                                        {\n                                            user \n                                            && user.username === comment.username\n                                            && (\n                                                <DeleteButton postId={id} commentId={comment.id} />\n                                            )\n                                        }\n                                        <Card.Header>{comment.username}</Card.Header>\n                                        <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                                        <Card.Description>{comment.body}</Card.Description>\n                                    </Card.Content>\n                                </Card>\n                            ))\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n\n    }\n    return postMarkup;\n}\n\nexport default SinglePost;","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction AuthRoute({ component: Component, ...rest}) {\n    const { user } = useContext(AuthContext);\n\n    return (\n        <Route\n            {...rest}\n            render={props => \n                user \n                ? <Redirect to='/' /> \n                : <Component {...props} />}\n        />\n    )\n}\n\nexport default AuthRoute;","import React from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport { Container } from 'semantic-ui-react';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport Register from './pages/register';\nimport SinglePost from './pages/singlePost';\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path='/' component={Home} />\n          <AuthRoute exact path='/login' component={Login} />\n          <AuthRoute exact path='/register' component={Register} />\n          <Route exact path='/posts/:postId' component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink  } from '@apollo/client'\nimport { setContext } from 'apollo-link-context'\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n});\n\nconst authLink = setContext(() => {\n  const token = localStorage.getItem('jwtToken');\n  return{\n    headers: {\n      Authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n  <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}